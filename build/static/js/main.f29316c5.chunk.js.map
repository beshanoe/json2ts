{"version":3,"sources":["utils/json2.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Json2Ts","config","interfaces","this","prependWithI","sortAlphabetically","addExport","useArrayGeneric","optionalFields","prefix","rootObjectName","json","result","unknownToTS","interfacesToString","value","key","type","Array","isArray","arrayToTS","objectToTS","capitalizeFirst","array","length","item","itemType","keyToTypeName","prototype","slice","apply","first","rest","last","pop","toUpperCase","join","str","obj","interfaceName","Object","keys","forEach","fieldType","indexOf","map","name","interfaceStr","fields","sort","field","push","AppWrapper","styled","div","Header","Main","Left","Right","Options","StyledForm","Form","props","flex","StyledTextArea","TextArea","ErrorMessage","App","state","jsonInput","resultOutput","errorMessage","convertJsonToTs","e","preventDefault","json2ts","setState","JSON","parse","convert","message","onJsonInputChange","currentTarget","onOptionsFieldChange","data","target","checked","rel","href","Icon","color","size","link","placeholder","onChange","Divider","Segment","onSubmit","Checkbox","label","toggle","Field","Button","onClick","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f29316c5.chunk.js","sourcesContent":["interface IJson2TsConfigPrivate {\n  prependWithI: boolean;\n  sortAlphabetically: boolean;\n  addExport: boolean;\n  useArrayGeneric: boolean;\n  optionalFields: boolean;\n  prefix: string;\n  rootObjectName: string;\n}\n\nexport type IJson2TsConfig = Partial<IJson2TsConfigPrivate>;\n\nexport class Json2Ts {\n\n  private config: IJson2TsConfigPrivate;\n\n  private interfaces: Record<string, Record<string, string>> = {};\n\n  constructor(\n    config: IJson2TsConfig = {}\n  ) {\n    this.config = {\n      prependWithI: true,\n      sortAlphabetically: false,\n      addExport: false,\n      useArrayGeneric: false,\n      optionalFields: false,\n      prefix: '',\n      rootObjectName: 'RootObject',\n      ...config\n    };\n  }\n\n  convert(json: {}) {\n    this.interfaces = {};\n    let result = `type JSON = ${this.unknownToTS(json)}\\n\\n`;\n    result += this.interfacesToString();\n    return result;\n  }\n\n  private unknownToTS(value: {}, key: string | undefined = void 0) {\n    let type: string = typeof value;\n    if (type === 'object') {\n      if (Array.isArray(value)) {\n        type = this.arrayToTS(value, key);\n      } else {\n        type = this.objectToTS(value, key && this.capitalizeFirst(key));\n      }\n    }\n    return type;\n  }\n\n  private arrayToTS(array: {}[], key: string | undefined = void 0) {\n    let type = array.length ? void 0 : 'any';\n    for (let item of array) {\n      const itemType = this.unknownToTS(item, this.keyToTypeName(key));\n      if (type && itemType !== type) {\n        type = 'any';\n        break;\n      } else {\n        type = itemType;\n      }\n    }\n    return this.config.useArrayGeneric ? `Array<${type}>` : `${type}[]`;\n  }\n\n  private keyToTypeName(key: string | undefined = void 0) {\n    if (!key || key.length < 2) {\n      return key;\n    }\n    const [first, ...rest]: string[] = Array.prototype.slice.apply(key);\n    const last = rest.pop();\n    return [first.toUpperCase(), ...rest, last === 's' ? '' : last].join('');\n  }\n\n  private capitalizeFirst(str: string) {\n    const [first, ...rest]: string[] = Array.prototype.slice.apply(str);\n    return [first.toUpperCase(), ...rest].join('');\n  }\n\n  private objectToTS(obj: Record<string, any> | null, type: string = this.config.rootObjectName) {\n    if (obj === null) {\n      return 'any';\n    }\n    const { prependWithI, prefix } = this.config;\n    if (prependWithI) {\n      type = `I${prefix || ''}${type}`;\n    }\n    if (!this.interfaces[type]) {\n      this.interfaces[type] = {};\n    }\n    const interfaceName = this.interfaces[type];\n    Object.keys(obj).forEach(key => {\n      const value = obj[key];\n      const fieldType = this.unknownToTS(value, key);\n      if (!interfaceName[key] || interfaceName[key].indexOf('any') === 0) {\n        interfaceName[key] = fieldType;\n      }\n    });\n    return type;\n  }\n\n  private interfacesToString() {\n    const { sortAlphabetically, addExport, optionalFields } = this.config;\n    return Object.keys(this.interfaces).map(name => {\n      const interfaceStr = [`${addExport ? 'export ' : ''}interface ${name} {`];\n      const fields = Object.keys(this.interfaces[name]);\n      if (sortAlphabetically) {\n        fields.sort();\n      }\n      fields\n        .forEach(field => {\n          const type = this.interfaces[name][field];\n          interfaceStr.push(`  ${field}${optionalFields ? '?' : ''}: ${type};`);\n        });\n      interfaceStr.push('}\\n');\n      return interfaceStr.join('\\n');\n    }).join('\\n');\n  }\n\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { Json2Ts, IJson2TsConfig } from './utils/json2';\nimport { Button, Form, TextArea, Segment, Divider, Icon } from 'semantic-ui-react';\n\nconst AppWrapper = styled.div`\n  width: 70%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst Main = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n  margin-bottom: 20px;\n`;\n\nconst Left = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 4;\n  margin-right: 20px;\n`;\n\nconst Right = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-basis: 25%;\n  padding-left: 0;\n`;\n\nconst Options = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledForm = styled(Form) `\n  flex-grow: ${props => props.flex || 1};\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledTextArea = styled(TextArea) `\n  .ui.form.ui.form & {\n    display: block;\n    flex-grow: 1;\n    resize: none;\n    font-family: monospace;\n    height: initial;\n    max-height: initial;\n    min-height: initial;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  margin-top: 10px;\n  color: red;\n`;\n\ninterface IAppState {\n  jsonInput: string;\n  resultOutput: string;\n  errorMessage: string;\n  config: IJson2TsConfig;\n}\n\nclass App extends React.Component<{}, IAppState> {\n\n  state = {\n    jsonInput: '',\n    resultOutput: '',\n    errorMessage: '',\n    config: {\n      prependWithI: true,\n      sortAlphabetically: false,\n      addExport: false,\n      useArrayGeneric: false,\n      optionalFields: false,\n      prefix: '',\n      rootObjectName: 'RootObject'\n    }\n  };\n\n  convertJsonToTs = (e: React.MouseEvent<HTMLButtonElement, MouseEvent> | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const json2ts = new Json2Ts(this.state.config);\n    this.setState({\n      errorMessage: ''\n    });\n    try {\n      const json = JSON.parse(this.state.jsonInput);\n      const resultOutput = json2ts.convert(json);\n      this.setState({\n        resultOutput\n      });\n    } catch (e) {\n      this.setState({\n        errorMessage: e.message\n      });\n    }\n\n  }\n\n  onJsonInputChange = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {\n    const { value } = e.currentTarget;\n    this.setState({\n      jsonInput: value\n    });\n  }\n\n  onOptionsFieldChange = (\n    e: React.FormEvent<HTMLInputElement>, data: { name?: string, checked?: boolean } | undefined = void 0) => {\n    const target = e.target as HTMLInputElement;\n    const value = data ? data.checked : target.value;\n    const name = data ? data.name : target.name;\n    if (name) {\n      this.setState({\n        config: {\n          ...this.state.config,\n          [name]: value\n        }\n      });\n    }\n  }\n\n  render() {\n    const { resultOutput, errorMessage, config } = this.state;\n    return (\n      <AppWrapper>\n        <Header>\n          <div>\n            <h3>json =&gt; ts</h3>\n          </div>\n          <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/beshanoe/json2ts\">\n            <Icon name=\"github square\" color=\"pink\" size=\"large\" link={true} />\n          </a>\n        </Header>\n        <Main>\n          <Left>\n            <StyledForm flex={1}>\n              <StyledTextArea placeholder=\"Put your JSON here\" onChange={this.onJsonInputChange} />\n            </StyledForm>\n            <Divider />\n            <StyledForm flex={3}>\n              <StyledTextArea placeholder=\"See result here\" value={resultOutput} />\n            </StyledForm>\n          </Left>\n          <Right>\n            <Segment>\n              <Options>\n                <Form onSubmit={this.convertJsonToTs}>\n                  <Form.Checkbox\n                    name=\"prependWithI\"\n                    checked={config.prependWithI}\n                    label=\"Prepend with I\"\n                    onChange={this.onOptionsFieldChange}\n                    toggle={true}\n                  />\n                  <Form.Checkbox\n                    name=\"sortAlphabetically\"\n                    checked={config.sortAlphabetically}\n                    label=\"Sort Aphabetically\"\n                    onChange={this.onOptionsFieldChange}\n                    toggle={true}\n                  />\n                  <Form.Checkbox\n                    name=\"addExport\"\n                    checked={config.addExport}\n                    label=\"Add export statement\"\n                    onChange={this.onOptionsFieldChange}\n                    toggle={true}\n                  />\n                  <Form.Checkbox\n                    name=\"useArrayGeneric\"\n                    checked={config.useArrayGeneric}\n                    label=\"Use Array<> notation\"\n                    onChange={this.onOptionsFieldChange}\n                    toggle={true}\n                  />\n                  <Form.Checkbox\n                    name=\"optionalFields\"\n                    checked={config.optionalFields}\n                    label=\"Optional fields\"\n                    onChange={this.onOptionsFieldChange}\n                    toggle={true}\n                  />\n                  <Divider />\n                  <Form.Field>\n                    <input\n                      name=\"prefix\"\n                      value={config.prefix}\n                      onChange={this.onOptionsFieldChange}\n                      placeholder=\"Interface prefix\"\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <input\n                      name=\"rootObjectName\"\n                      value={config.rootObjectName}\n                      onChange={this.onOptionsFieldChange}\n                      placeholder=\"Root object name\"\n                    />\n                  </Form.Field>\n                  <Divider />\n                  <Button onClick={this.convertJsonToTs}>Convert</Button>\n                  {errorMessage && (\n                    <ErrorMessage>{errorMessage}</ErrorMessage>\n                  )}\n                </Form>\n              </Options>\n            </Segment>\n          </Right>\n        </Main>\n      </AppWrapper>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport 'semantic-ui-css/semantic.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  body, html {\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: sans-serif;\n  }\n\n  #root {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background: #fbfbfb;\n  }\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}